- name: Become user moc
  become: true
  become_user: moc
  block:
    - name: Set contracts.json
      block:     
        - slurp:
            src: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/contracts.json"
          delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
          register:
            contracts 
        - set_fact:
            contracts_json: "{{ contracts['content'] | b64decode }}"
  
    - name: Uncomment line at node.toml
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      lineinfile:
        path: /home/moc/node.toml
        regexp: '^.*unlock = .*'
        line: 'unlock = ["{{ MOC_ADDRESS }}"]'
      notify:
        - restart poa-parity
        - restart poa-pm2
    
    - name: Run handlers immediately
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      meta: flush_handlers
         
    - name: Clone production key generator from GitHub
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      git:
        repo: "{{ PRODUCTION_KEY_GENERATOR_REPO }}"
        dest: "/home/moc/deployment-terraform"
        force: yes
        accept_hostkey: yes

    - name: Check if initial keys were not already generated
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      find:
        paths: /home/moc/poa-scripts-moc/generateInitialKey/output
      register: initial
        
    - name: Adjust config files before generate initial keys
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      lineinfile:
        path: /home/moc/poa-scripts-moc/config.json
        regexp: '^.*\"addr\"\: .*'
        line: '        "addr": "{{ contracts_json.KEYS_MANAGER_ADDRESS }}",'

    - name: Generate initial keys
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      shell: "for i in {1..{{ (initial_key_count - initial.matched/2) | int }}}; do npm start; done"
      args:
        chdir: /home/moc/poa-scripts-moc/generateInitialKey
        executable: /bin/bash
      when: initial.matched/2 < initial_key_count
      
    - name: Select initial keys to copy to gen-prod-keys folder
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      shell: "ls -1 /home/moc/poa-scripts-moc/generateInitialKey/output/ | head -n {{ (groups['validator'].index(ansible_play_batch|first)+1) * 2 }}"
      register: initial_keys
      when: groups['validator'].index(ansible_play_batch|first) < initial_key_convert_count
      
    - name: Copy initial keys to the gen-prod-keys folder
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      copy:
        src: "/home/moc/poa-scripts-moc/generateInitialKey/output/{{ item }}"
        dest: "/home/moc/deployment-terraform/helper-scripts/gen-prod-keys/keystore/{{ item }}"
        remote_src: true
      with_items: "{{ initial_keys.stdout_lines }}"
      when: groups['validator'].index(ansible_play_batch|first) < initial_key_convert_count
    
    - name: Check if keys were not already deployed
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      find:
        paths: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/validator-keys"
        file_type: directory
      register: folders
    
    - name: Install reqired NPM modules (workaround)
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      shell: "npm install"
      args:
        chdir: "/home/moc/deployment-terraform/helper-scripts/gen-prod-keys/"
      when: folders.matched <= initial_key_convert_count 
         
    - name: Execute script
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      command: "node index.js {{ contracts_json.KEYS_MANAGER_ADDRESS }}"
      args:
        chdir: "/home/moc/deployment-terraform/helper-scripts/gen-prod-keys/"
      when: folders.matched <= initial_key_convert_count 
        
    - name: Comment line at node.toml
      delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
      lineinfile:
          path: /home/moc/node.toml
          regexp: '^.*unlock = .*'
          line: '#unlock = ["{{ MOC_ADDRESS }}"]'
      notify:
        - restart poa-parity
        - restart poa-pm2
        
- name: Select production keys to copy to gen-prod-keys folder
  delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
  shell: "find /home/moc/deployment-terraform/helper-scripts/gen-prod-keys/production-keys/ -type f"
  register: production_keys

- name: Copy production keys to the output folder
  delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
  copy:
    remote_src: true
    src: "{{ item }}"
    dest: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/validator-keys/{{ groups['validator'].index(ansible_play_batch|first)+1 }}/"
  with_items: "{{ production_keys.stdout_lines }}"
  when: folders.matched <= initial_key_convert_count 
  
- name: Remove old keys
  delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
  file: 
    state: absent
    path: "{{ item }}"
  with_items: "{{ production_keys.stdout_lines }}"
  
- name: List initial keys
  shell: "ls -1 /home/moc/poa-scripts-moc/generateInitialKey/output/ | tail -n {{ (initial_key_count - initial_key_convert_count) * 2 }}"
  delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
  register: not_converted_keys
  when: initial_key_count > initial_key_convert_count
  
- name: Copy initial keys to the output folder
  delegate_to: "{{ hostvars[groups['moc']|first]['inventory_hostname'] }}"
  copy: 
    remote_src: true
    src: "/home/moc/poa-scripts-moc/generateInitialKey/output/{{ item }}"
    dest: "/home/{{ ansible_user }}/{{ NETWORK_NAME }}/validator-keys/{{ item }}"
  with_items: "{{ not_converted_keys.stdout_lines }}"
  when: initial_key_count > initial_key_convert_count   